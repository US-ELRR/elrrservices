name: Docker-CI

on:
  push:
    branches:
      - dev-update-base
  pull_request:
    branches:
      - dev-update-base
    types: [opened, synchronize, reopened]

jobs:  
  build-push:
    # Install/build maven dependencies
    runs-on: ubuntu-latest    

    steps:

    - name: Set up archived Oracle JDK 17.0.3.1
      uses: oracle-actions/setup-java@v1
      with:
        website: oracle.com
        release: 17
        version: 17.0.3.1
    
    # Entities Repo (must be built before services)
    - name: Checkout tools repo
      uses: actions/checkout@v4
      with:
        repository: US-ELRR/elrrserviceentities
        path: elrrserviceentities
    - name: Maven build Entities
      run: |
       cd elrrserviceentities
       echo "maven build - Clean install"
       mvn clean install
    
    # Services repo
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: elrrservices
    - name: Maven build
      run: |
       cd elrrservices
       echo "maven build - Clean install"
       mvn clean install
       mkdir -p target/dependency && (cd target/dependency; jar -xf ../elrrservices-0.0.1-SNAPSHOT.jar)
    
    - name: Docker login
      env:
       DOCKER_USER: ${{ secrets.DOCKER_USER }}
       DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
       echo "Authenticate to Docker"
       docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
    
    # - name: Docker build
    #   run: |
    #    echo "Start docker build"
    #    #docker build . -t openlxp/elrr-services
    #    docker build --build-arg JAR_FILE="./target/elrrservices-0.0.1-SNAPSHOT.jar" --file Dockerfile -t openlxp/elrr-services .

    # Push image to Amazon ECR
    
    #- name: Configure AWS credentials
    #  uses: aws-actions/configure-aws-credentials@v1
    #  with:
    #    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #    aws-region: ${{ secrets.AWS_REGION }}
    #- name: ECR Login
    #  id: login-ecr
    #  uses: aws-actions/amazon-ecr-login@v1
    #  with:
    #    mask-password: 'true'
    #- name: Build, tag, and push image to Amazon ECR
    #  env:
    #    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #    ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
    #    IMAGE_TAG: latest
    #  run: |
    #    echo "Starting docker build"
    #    docker build --build-arg JAR_FILE="./target/elrrservices-0.0.1-SNAPSHOT.jar" --file Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #    echo "Pushing image to ECR..."
    #    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
