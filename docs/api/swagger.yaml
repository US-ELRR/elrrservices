openapi: 3.0.1
info:
  title: ELRR Services OpenAPI definition
  version: v0
servers:
  - url: http://127.0.0.1:8080
    description: Generated server url
paths:
  /api/accreditation:
    get:
      tags:
        - accreditation-controller
      operationId: getAllAccreditations
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccreditationDto'
    post:
      tags:
        - accreditation-controller
      operationId: createAccreditation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccreditationDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccreditationDto'
  /api/accreditation/{id}:
    get:
      tags:
        - accreditation-controller
      operationId: getAccreditationById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccreditationDto'
    put:
      tags:
        - accreditation-controller
      operationId: updateAccreditation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccreditationDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccreditationDto'
    delete:
      tags:
        - accreditation-controller
      operationId: deleteAccreditation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
  /api/competency/{id}:
    get:
      tags:
        - competency-controller
      operationId: getCompetencyById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CompetencyDto'
    put:
      tags:
        - competency-controller
      operationId: updateCompetency
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetencyDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CompetencyDto'
    delete:
      tags:
        - competency-controller
      operationId: deleteCompetency
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
  /api/competency:
    get:
      tags:
        - competency-controller
      operationId: getAllCompetencys
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompetencyDto'
    post:
      tags:
        - competency-controller
      operationId: createCompetency
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetencyDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CompetencyDto'
  /api/contactinformation/{id}:
    get:
      tags:
        - contact-information-controller
      operationId: getCompetencyById_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ContactInformationDto'
    put:
      tags:
        - contact-information-controller
      operationId: updateCompetency_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactInformationDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ContactInformationDto'
    delete:
      tags:
        - contact-information-controller
      operationId: deleteCompetency_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
  /api/contactinformation:
    get:
      tags:
        - contact-information-controller
      operationId: getAllCompetencys_1
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactInformationDto'
    post:
      tags:
        - contact-information-controller
      operationId: createCompetency_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactInformationDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ContactInformationDto'
  /api/courseaccreditation:
    get:
      tags:
        - course-accreditation-controller
      operationId: getAllCourseAccreditations
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseAccreditationDto'
    post:
      tags:
        - course-accreditation-controller
      operationId: createCourseAccreditation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseAccreditationDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CourseAccreditationDto'
  /api/courseaccreditation/{id}:
    get:
      tags:
        - course-accreditation-controller
      operationId: getCourseAccreditationById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CourseAccreditationDto'
    put:
      tags:
        - course-accreditation-controller
      operationId: updateCourseAccreditation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseAccreditationDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CourseAccreditationDto'
    delete:
      tags:
        - course-accreditation-controller
      operationId: deleteCourseAccreditation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
  /api/course/{id}:
    get:
      tags:
        - course-controller
      operationId: getCourseById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CourseDto'
    put:
      tags:
        - course-controller
      operationId: updateCourse
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CourseDto'
    delete:
      tags:
        - course-controller
      operationId: deleteCourse
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
  /api/course:
    get:
      tags:
        - course-controller
      operationId: getAllCourses
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseDto'
    post:
      tags:
        - course-controller
      operationId: createCourse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CourseDto'
  /api/elrrstagedata:
    get:
      tags:
        - elrr-stage-controller
      operationId: localData
      parameters:
        - name: mbox
          in: query
          required: false
          schema:
            type: string
            default: mailto:c.cooper@yahoo.com
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: string
  /api/employment:
    get:
      tags:
        - employment-controller
      operationId: getAllEmployments
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmploymentDto'
    post:
      tags:
        - employment-controller
      operationId: createEmployment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmploymentDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmploymentDto'
  /api/employment/{id}:
    get:
      tags:
        - employment-controller
      operationId: getEmploymentById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmploymentDto'
    put:
      tags:
        - employment-controller
      operationId: updateEmployment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmploymentDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmploymentDto'
    delete:
      tags:
        - employment-controller
      operationId: deleteEmployment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
  /api/learner:
    get:
      tags:
        - home-controller
      operationId: getEmploymentById_1
      parameters:
        - name: userName
          in: query
          required: false
          schema:
            type: string
        - name: password
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearnerProfileDto'
  /api/learnerprofilefact:
    get:
      tags:
        - learner-profile-controller
      operationId: getAllCourseAccreditations_1
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LearnerProfileDto'
    post:
      tags:
        - learner-profile-controller
      operationId: createCourseAccreditation_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LearnerProfileDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LearnerProfileDto'
  /api/learnerprofilefact/{id}:
    get:
      tags:
        - learner-profile-controller
      operationId: getCourseAccreditationById_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LearnerProfileDto'
    put:
      tags:
        - learner-profile-controller
      operationId: updateCourseAccreditation_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LearnerProfileDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LearnerProfileDto'
    delete:
      tags:
        - learner-profile-controller
      operationId: deleteCourseAccreditation_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
  /api/organization/{id}:
    get:
      tags:
        - organization-controller
      operationId: getOrganizationById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrganizationDto'
    put:
      tags:
        - organization-controller
      operationId: updateOrganization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrganizationDto'
    delete:
      tags:
        - organization-controller
      operationId: deleteOrganization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
  /api/organization:
    get:
      tags:
        - organization-controller
      operationId: getAllOrganizations
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationDto'
    post:
      tags:
        - organization-controller
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrganizationDto'
  /api/person/{id}:
    get:
      tags:
        - person-controller
      operationId: getPersonById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PersonDto'
    put:
      tags:
        - person-controller
      operationId: updatePerson
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PersonDto'
    delete:
      tags:
        - person-controller
      operationId: deletePerson
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
  /api/person:
    get:
      tags:
        - person-controller
      operationId: getAllPersons
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonDto'
    post:
      tags:
        - person-controller
      operationId: createPerson
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonDto'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PersonDto'
  /ping:
    get:
      tags:
        - ping-controller
      operationId: ping
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
components:
  schemas:
    AccreditationDto:
      type: object
      properties:
        accreditationid:
          type: integer
          format: int64
        organizationaccredits:
          type: string
        accreditedby:
          type: string
        accreditationtype:
          type: string
        accreditationadminprocess:
          type: string
        accreditationawarddate:
          type: string
          format: date-time
        accreditationexpirationdate:
          type: string
          format: date-time
        recordstatus:
          type: string
    CompetencyDto:
      type: object
      properties:
        competencyid:
          type: integer
          format: int64
        competencyframeworktitle:
          type: string
        competencyframeworkversion:
          type: string
        competencyframeworkidentifier:
          type: string
        competencyframeworkdescription:
          type: string
        competencyframeworksubject:
          type: string
        competencyframeworkvalidstartdate:
          type: string
          format: date-time
        competencyframeworkvalidenddate:
          type: string
          format: date-time
        competencydefinitionidentifier:
          type: string
        competencydefinitionidentifierurl:
          type: string
        competencytaxonomyid:
          type: string
        competencydefinitionvalidstartdate:
          type: string
          format: date-time
        competencydefinitionvalideenddate:
          type: string
          format: date-time
        competencydefinitionparentidentifier:
          type: string
        competencydefinitionparenturl:
          type: string
        competencydescriptionparentcode:
          type: string
        competencydefinitioncode:
          type: string
        competencydefinitionstatement:
          type: string
        competencydefinitiontypeurl:
          type: string
        competencydefinitiontype:
          type: string
        recordstatus:
          type: string
    ContactInformationDto:
      type: object
      properties:
        contactinformationid:
          type: integer
          format: int64
        personid:
          type: integer
          format: int64
        contactinformationData:
          type: string
        telephonenumber:
          type: string
        isprimaryindicator:
          type: string
        telephonetype:
          type: string
        electronicmailaddress:
          type: string
        electronicmailaddresstype:
          type: string
        emergencycontact:
          type: string
        recordstatus:
          type: string
    CourseAccreditationDto:
      type: object
      properties:
        courseaccreditationid:
          type: integer
          format: int64
        accreditedby:
          type: string
        accreditationtype:
          type: string
        accreditationadminprocess:
          type: string
        accreditationawarddate:
          type: string
          format: date-time
        accreditationexpirationdate:
          type: string
          format: date-time
        recordstatus:
          type: string
    CourseDto:
      type: object
      properties:
        courseid:
          type: integer
          format: int64
        name:
          type: string
        coursesubjectmatter:
          type: string
        coursesubjectabbreviation:
          type: string
        courseidentifier:
          type: string
        courselevel:
          type: string
        coursenumber:
          type: string
        courseinstructionmethod:
          type: string
        coursestartdate:
          type: string
          format: date-time
        courseenddate:
          type: string
          format: date-time
        courseenrollmentdate:
          type: string
          format: date-time
        courseacademicgrade:
          type: string
        courseprovidername:
          type: string
        departmentname:
          type: string
        coursegradescalecode:
          type: string
        coursemetadatarepository:
          type: string
        courselrsendpoint:
          type: string
        coursedescription:
          type: string
        recordstatus:
          type: string
    EmploymentDto:
      type: object
      properties:
        employmentid:
          type: integer
          format: int64
        employerName:
          type: string
        employerdepartment:
          type: string
        hiredate:
          type: string
          format: date-time
        employmentstartdate:
          type: string
        employmentenddate:
          type: string
          format: date-time
        joblevel:
          type: string
        occupation:
          type: string
        employed:
          type: string
        primarycarrercategory:
          type: string
        secondcarrercategory:
          type: string
        recordstatus:
          type: string
    LearnerProfileDto:
      type: object
      properties:
        personid:
          type: integer
          format: int64
        learneraddressid:
          type: integer
          format: int64
        contactinformationid:
          type: integer
          format: int64
        employmentid:
          type: integer
          format: int64
        positionid:
          type: integer
          format: int64
        citizenshipid:
          type: integer
          format: int64
        studentid:
          type: integer
          format: int64
        courseid:
          type: integer
          format: int64
        courseaccreditationid:
          type: integer
          format: int64
        competencyid:
          type: integer
          format: int64
        credentialid:
          type: integer
          format: int64
        organizationid:
          type: integer
          format: int64
        organizationaddressid:
          type: integer
          format: int64
        accreditationid:
          type: integer
          format: int64
        activitystatus:
          type: integer
          format: int64
        recordstatus:
          type: string
    OrganizationDto:
      type: object
      properties:
        organizationid:
          type: integer
          format: int64
        organizationname:
          type: string
        organizationidentifier:
          type: string
        organizationidentificationcode:
          type: string
        organizationidentificationsystem:
          type: string
        industrytypeidentifier:
          type: string
        organizationfein:
          type: string
        organizationdescription:
          type: string
        parentorganization:
          type: string
        recordstatus:
          type: string
    PersonDto:
      type: object
      properties:
        personid:
          type: integer
          format: int64
        name:
          type: string
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        namePrefix:
          type: string
        titleAffixcode:
          type: string
        nameSuffix:
          type: string
        qualificationAffixcode:
          type: string
        maidenName:
          type: string
        preferredName:
          type: string
        humanResourceIdentifier:
          type: string
        personnelIdentificationSystem:
          type: string
        birthdate:
          type: string
          format: date-time
        sex:
          type: string
        primaryLanguage:
          type: string
        militaryVeteranindicator:
          type: string
        recordStatus:
          type: string