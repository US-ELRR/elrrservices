logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG
spring.http.converters.preferred-json-mapper=jsonb
server.port=8092

## PostgreSQL
spring.datasource.url=jdbc:postgresql://${PGHOST}:${PGPORT}/${PG_DATABASE}
spring.datasource.username=${PG_RW_USER}
spring.datasource.password=${PG_RW_PASSWORD}
spring.datasource.platform=elrr
spring.jpa.properties.hibernate.default_schema=services_schema


lrs.samlurl=lrs.samlurl=https://mocksaml.com/api/saml/metadata
lrs.samlid=elrrsamltest

cors.urls=ENC(YicJKOMq1D4EtPnmZpLzyXXr8aNZGHbdQVT4SfXlD7kpL2025jH5X6xptnUNqFNF/cgkt/HMJk4VSmW6xmYXiJ3Cun41U0uTSQ4SpC4yhtcMD7h49ige8USU09/2HOkW0QuYVpLACGLQx8+LIrioTd0XhXD0f5EA0HyWo9iT4uK583nwcg09FZC4CeH/ubjAvXPwabfOh0zc8iz044vjYQ==)

## default connection pool
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5
spring.datasource.hikari.poolName=ELRRHikariPool

## JPA related
## drop n create table again, only for testing in development / local environments
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true

#Logging
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=INFO
logging.level.org.springframework=INFO
logging.level.com.deloitte=INFO
logging.level.com.zaxxer=INFO
logging.level.root=ERROR

#LRS connection details
lrr.dataservicesurl = ENC(sBMJjQUR8jFT0DfySS6/ioC/mX6um30zonCl+uEe1oU0tEyCRGB3Xh1+XJ9FajiCqQubjtVMjTFJroXnYjlgjA==)
elrrLearners.maxsize=10

spring.mvc.pathmatch.matching-strategy=ANT_PATH_MATCHER

spring.http.multipart.enabled=true
spring.http.multipart.max-file-size=2MB
spring.http.multipart.max-request-size=2MB
server.use-forward-headers=true

json.max.size.limit=2000000

# Editing switches
# Enable = true
# Disable = false
# Use true for p1
# Use false for Deloitte sandbox
check.http.header=false
check.media.type.json=false

# Configuration for External Admin JWT Authentication
# External Admin JWTs must have this role to be accepted
admin.jwt.role=${ELRR_ADMIN_JWT_ROLE:elrr-admin}
# The key in the JWT that contains the role information
admin.jwt.role-key=${ELRR_ADMIN_JWT_ROLE_KEY:group-simple}
# Comma-separated whitelist of JWT issuers that will not be validated
admin.jwt.issuer-whitelist=${ELRR_ADMIN_JWT_ISSUER_WHITELIST:http://example.com}
# The key in the JWT that contains the user ID information
admin.jwt.user-id-key=${ELRR_ADMIN_JWT_USER_ID_KEY:preferred_username}

# Configuration for API JWT Authentication
# Issuer for JWTs created by the API
api.jwt.issuer=${ELRR_API_JWT_ISSUER:http://elrr.example.com}
# The key to set in the JWT that contains the creator's user ID
api.jwt.user-id-key=${ELRR_API_JWT_USER_ID_KEY:token-creator}
